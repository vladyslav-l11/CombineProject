// This file is autogenerated. Do not modify!
// Generated by https://github.com/pgorzelany/SwiftConfiguration
import Foundation
class SwiftConfiguration {
    enum Configuration: String, CaseIterable {
        case Debug = "Debug"
		case Release = "Release"
		
    }
    enum ConfigurationKey: String, CaseIterable {
        case baseUrl
		case testData
		case testDownload
		case testUpload
		
    }
    // MARK: Shared instance
    static let current = SwiftConfiguration()
    // MARK: Properties
    private let configurationKey = "SwiftConfiguration.currentConfiguration"
    private let configurationPlistFileName = "Configuration.plist"
    private let activeConfigurationDictionary: NSDictionary
    let activeConfiguration: Configuration
    	var baseUrl: String {
		return value(for: .baseUrl)
	}

	var testData: String {
		return value(for: .testData)
	}

	var testDownload: String {
		return value(for: .testDownload)
	}

	var testUpload: String {
		return value(for: .testUpload)
	}


    // MARK: Lifecycle
    init(targetConfiguration: Configuration? = nil) {
        let bundle = Bundle(for: SwiftConfiguration.self)
        guard let rawConfiguration = bundle.object(forInfoDictionaryKey: configurationKey) as? String,
            let configurationDictionaryPath = bundle.path(forResource: configurationPlistFileName, ofType: nil),
            let activeConfiguration = targetConfiguration ?? Configuration(rawValue: rawConfiguration),
            let configurationDictionary = NSDictionary(contentsOfFile: configurationDictionaryPath),
            let activeEnvironmentDictionary = configurationDictionary[activeConfiguration.rawValue] as? NSDictionary
            else {
                fatalError("Configuration Error")
        }
        self.activeConfiguration = activeConfiguration
        self.activeConfigurationDictionary = activeEnvironmentDictionary
    }
    // MARK: Methods
    func value<T>(for key: ConfigurationKey) -> T {
        guard let value = activeConfigurationDictionary[key.rawValue] as? T else {
            fatalError("No value satysfying requirements")
        }
        return value
    }
    func isRunning(in configuration: Configuration) -> Bool {
        return activeConfiguration == configuration
    }
}